  49   │  * types => {
  50   │  *  1 = INPUT (<);
  51   │  *  2 = HEREDOC (<<);
  52   │  *  3 = TRUNC (>);
  53   │  *  4 = APPEND (>>);
  54   │  *  5 = PIPES (|);
  55   │  *  6 = CMD (ex: 'ls');
  56   │  *  7 = ARG (ex: ls '-l');
  57   │  * }

si une commande fail, par exemple ls -la | asdlkasd | wc -l, on se retrouve avec quelques chose comme ceci:

asdlkasd: command not found
0

le bash feed un input a wc, de 0 vu que la commande n'a pas fonctionne. A voir avec le A si on fait la meme ou nsm


TRES IMPORTANT: Je check a aucun moment si dup/chdir/close/execve fail, i lfaut proteger les fonctions et preparer une fonctiuon qui remet a neuf la data dans le cas ou ca arrive

HEREDOC: A faire en peercoding psk je vais toucher au parsing

TRES TRES TRES IMPORTANT -> A faire dans le parsing, une fonction qui verifie lintegrite de la liste de token, si tout est bien a sa place et que ya pas de dinguerie, je lai deja fait a voir si on le reprends mais je part du principe que je recois une string valide sans dingz, si ya de la dingz dans la string ca EXPLOSE et je vais pas me casser les couilles a gerer toutes les explosion alors quil faut juste mettre un stop a une string degeulasse

(ulimi -n 6 && ./minishell) -> limite le nombre de fd

  //ft_exit
	// si il n'y a pas d 'args[1] tu exit avec le dernier $? qui tu as TODO
	// Apres avoir gerer les signaux faire en sort que si on est dans un pipe ca printf pas exit